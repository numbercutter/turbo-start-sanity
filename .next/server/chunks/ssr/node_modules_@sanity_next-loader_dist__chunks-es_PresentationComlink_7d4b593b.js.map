{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"PresentationComlink.js","sources":["file:///Users/rayspartz/Desktop/Code/turbo-start-sanity/node_modules/%40sanity/next-loader/src/client-components/live/PresentationComlink.tsx"],"sourcesContent":["import type {ClientPerspective} from '@sanity/client'\nimport {\n  createNode,\n  createNodeMachine,\n  // type Node,\n} from '@sanity/comlink'\nimport {setPerspectiveCookie} from '@sanity/next-loader/server-actions'\nimport {\n  createCompatibilityActors,\n  type LoaderControllerMsg,\n  type LoaderNodeMsg,\n} from '@sanity/presentation-comlink'\nimport {useRouter} from 'next/navigation.js'\nimport {\n  useEffect,\n  // useState\n} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport {setComlink} from '../../hooks/context'\n\nfunction PresentationComlink(props: {\n  // projectId: string\n  // dataset: string\n  // handleDraftModeAction: (secret: string) => Promise<void | string>\n  draftModeEnabled: boolean\n  draftModePerspective: ClientPerspective\n}): React.JSX.Element | null {\n  const {draftModeEnabled, draftModePerspective} = props\n  const router = useRouter()\n\n  // const [presentationComlink, setPresentationComlink] = useState<Node<\n  //   LoaderControllerMsg,\n  //   LoaderNodeMsg\n  // > | null>(null)\n\n  const handlePerspectiveChange = useEffectEvent(\n    (perspective: ClientPerspective, signal: AbortSignal) => {\n      if (draftModeEnabled && perspective !== draftModePerspective) {\n        setPerspectiveCookie(perspective)\n          .then(() => {\n            if (signal.aborted) return\n            router.refresh()\n          })\n          // eslint-disable-next-line no-console\n          .catch((reason) => console.error('Failed to set the preview perspective cookie', reason))\n      }\n    },\n  )\n\n  // const [status, setStatus] = useState('disconnected')\n  useEffect(() => {\n    const comlink = createNode<LoaderNodeMsg, LoaderControllerMsg>(\n      {\n        name: 'loaders',\n        connectTo: 'presentation',\n      },\n      createNodeMachine<LoaderNodeMsg, LoaderControllerMsg>().provide({\n        actors: createCompatibilityActors<LoaderNodeMsg>(),\n      }),\n    )\n\n    // comlink.onStatus((status) => {\n    //   setStatus(status)\n    // })\n\n    let controller: AbortController | undefined\n    comlink.on('loader/perspective', (data) => {\n      controller?.abort()\n      controller = new AbortController()\n      handlePerspectiveChange(data.perspective, controller.signal)\n    })\n\n    const stop = comlink.start()\n    // setPresentationComlink(comlink)\n    setComlink(comlink)\n    // eslint-disable-next-line no-console\n    // console.log('setting comlink', comlink)\n    return () => {\n      // eslint-disable-next-line no-console\n      // console.log('stopping comlink')\n      stop()\n    }\n  }, [])\n\n  // @TODO come back to this later\n  // const handleEnableDraftMode = useEffectEvent(async (signal: AbortSignal) => {\n  //   if (signal.aborted) return\n  //   const {secret} = await (presentationComlink?.fetch(\n  //     {\n  //       type: 'loader/fetch-preview-url-secret' as const,\n  //       data: {projectId, dataset},\n  //     },\n  //     {signal},\n  //   ) || {secret: null})\n  //   if (signal.aborted) return\n  //   const error = await handleDraftModeAction(secret!)\n  //   // eslint-disable-next-line no-console\n  //   // @TODO call another server action here that can tell us if draft mode is actually enabled\n  //   if (error) {\n  //     // @TODO use sonnet or whatever to push a toast with the error\n  //     // eslint-disable-next-line no-console\n  //     console.error('Error enabling draft mode', error)\n  //     return\n  //   }\n  //   // console.log('Draft mode enabled?', {enabled})\n  //   if (signal.aborted) return\n  //   router.refresh()\n  // })\n  // const connected = status === 'connected'\n  // useEffect(() => {\n  //   if (connected && !draftModeEnabled) {\n  //     const controller = new AbortController()\n  //     handleEnableDraftMode(controller.signal).catch((reason) => {\n  //       // eslint-disable-next-line no-console\n  //       console.error('Failed to enable draft mode', reason)\n  //       return handleEnableDraftMode(controller.signal)\n  //     })\n  //     return () => {\n  //       controller.abort()\n  //     }\n  //   }\n  //   return undefined\n  // }, [connected, draftModeEnabled, handleEnableDraftMode])\n\n  return null\n}\nPresentationComlink.displayName = 'PresentationComlink'\n\nexport default PresentationComlink\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAoBA,SAAS,oBAAoB,KAAA,EAMA;IACrB,MAAA,EAAC,gBAAA,EAAkB,oBAAA,EAAA,GAAwB,OAC3C,gJAAS,YAAA,CAAA,IAOT,sLAA0B,iBAAA,EAC9B,CAAC,aAAgC,WAAwB;QACnD,oBAAoB,gBAAgB,oMACtC,uBAAA,EAAqB,WAAW,EAC7B,IAAA,CAAK,MAAM;YACN,OAAO,OAAA,IACX,OAAO,OAAA,CAAQ;QAAA,CAChB,EAEA,KAAA,CAAM,CAAC,SAAW,QAAQ,KAAA,CAAM,gDAAgD,MAAM,CAAC;IAAA;IAMhG,iNAAA,YAAA,EAAU,MAAM;QACd,MAAM,mKAAU,aAAA,EACd;YACE,MAAM;YACN,WAAW;QACb,4JACA,oBAAA,CAAA,GAAwD,OAAA,CAAQ;YAC9D,iMAAQ,4BAAA,CAAyC;QAClD,CAAA;QAOC,IAAA;QACI,QAAA,EAAA,CAAG,sBAAsB,CAAC,SAAS;YAC7B,YAAA,MAAA,GACZ,aAAa,IAAI,gBAAA,GACjB,wBAAwB,KAAK,WAAA,EAAa,WAAW,MAAM;QAAA,CAC5D;QAEK,MAAA,OAAO,QAAQ,KAAA,CAAM;QAEhB,0LAAA,aAAA,EAAA,OAAO,GAGX,MAAM;YAGN,KAAA;QACP;IAAA,GACC,CAAA,CAAE,GA0CE;AACT;AACA,oBAAoB,WAAA,GAAc","ignoreList":[0],"debugId":null}}]
}